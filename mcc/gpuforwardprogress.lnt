module gpuforwardprogress is

-------------------------------------------------------------------------------
-- Types, Channels

type NatSet is
  set of nat
  with length, remove, member
end type

-- Shared memory
function NumMemLoc() : nat is
  return 9
end function

type MemArray is
  array [1..9] of int
end type

type MemLoc is
  range 1..9 of nat
end type

type Instruction is
  AXB(checkLoc: MemLoc, checkVal: int, jumpInst: nat, doExch: bool, exchVal: int)
end type

type Program is
   list of Instruction
   with element, length
end type

channel NatChan is
  (nat)
end channel

channel StepChan is
  -- tid, instruction, doBranch, fairly scheduled threads
  (nat, Instruction, bool, NatSet)
end channel

process Interpreter [STEP: StepChan, TERMINATE: NatChan] (tid: nat, prog: Program) is
  var
    pc: nat, -- program counter
    -- variables to match AXB operands:
    checkLoc: MemLoc, checkVal: int, jumpInst: nat, doExch: bool, exchVal: int, doBranch: bool
 in
    pc := 1; -- start at first instruction (list indexes start at 1)

    loop interpreterLoop in

      case element(prog, pc) of Instruction in
         AXB(checkLoc, checkVal, jumpInst, doExch, exchVal) ->
	   STEP(tid, AXB(checkLoc, checkVal, jumpInst, doExch, exchVal), ?doBranch, ?any NatSet);
	   if doBranch then
             pc := jumpInst
	   else
             pc := pc + 1   
           end if
      end case;

      -- Reach end of program?
      if pc > length(prog) then
        break interpreterLoop
      end if

    end loop;
    -- signal end of thread to scheduler
    TERMINATE(tid)
  end var
end process

process sharedMemory [STEP: StepChan, TERMINATE: NatChan, ALL_DONE: none] (numThreads: nat) is
  var
    doneThread: nat,
    mem: MemArray,
    -- variables to match AXB operands:
    checkLoc: MemLoc, checkVal: int, doExch: bool, exchVal: int,
    doBranch: bool
  in
    doneThread := 0;
    mem := MemArray(0);

    -- main loop
    loop memLoop in
      select
        STEP(?any nat, ?AXB(checkLoc, checkVal, any nat, doExch, exchVal), ?doBranch, ?any NatSet) where doBranch == (checkVal == mem[nat(checkLoc)]);
        if doExch then
          mem[nat(checkLoc)] := exchVal
        end if

      []

        TERMINATE(?any nat);
        doneThread := doneThread + 1;
        if doneThread == numThreads then
          break memLoop
        end if
      end select
    end loop;

    ALL_DONE

  end var
end process


-------------------------------------------------------------------------------

process UNFAIR [STEP: StepChan, TERMINATE: NatChan, ALL_DONE: none] is
  var
    F: NatSet
  in
    F := {};
    loop L in
      select
        STEP(?any nat, ?any Instruction, ?any bool, F)
      []
        TERMINATE(?any nat)
      []
        ALL_DONE;
	break L
      end select
    end loop
  end var
end process


process LOBE [STEP: StepChan, TERMINATE: NatChan, ALL_DONE: none] is
  var
    tid: nat,
    t: nat,
    F: NatSet,
    done: NatSet
  in
    F := {};
    done := {};
    loop L in
      select
        STEP(?tid, ?any Instruction, ?any bool, F);
	for t := 0 while t <= tid by t := t + 1 loop
          if not(member(t, done)) then
            F := insert(t, F)
	  end if
        end loop
      []
        TERMINATE(?tid);
	F := remove(tid, F);
	done := insert(tid, done)
      []
        ALL_DONE;
	break L
      end select
    end loop
  end var
end process


process MAIN [STEP: StepChan, TERMINATE: NatChan, ALL_DONE: none] is

par STEP, TERMINATE in
   ALL_DONE -> sharedMemory[STEP, TERMINATE, ALL_DONE](7) -- This argument should reflect the total number of threads

-- Select a progress model here by uncommenting
-- || ALL_DONE -> UNFAIR[STEP, TERMINATE, ALL_DONE]
|| ALL_DONE -> LOBE[STEP, TERMINATE, ALL_DONE]

|| par
      interpreter[STEP, TERMINATE](0, {
                                        AXB(MemLoc(1), 0, 1, true, 1)
				      })
   || interpreter[STEP, TERMINATE](1, {
                                        AXB(MemLoc(1), 0, 1, false, 0),
                                        AXB(MemLoc(2), 0, 1, true, 1)
                                      })
   || interpreter[STEP, TERMINATE](2, {
                                        AXB(MemLoc(2), 0, 1, false, 0),
                                        AXB(MemLoc(3), 0, 1, true, 1)
                                      })
   || interpreter[STEP, TERMINATE](3, {
                                        AXB(MemLoc(3), 0, 1, false, 0),
                                        AXB(MemLoc(4), 0, 1, true, 1)
                                      })
   || interpreter[STEP, TERMINATE](4, {
                                        AXB(MemLoc(4), 0, 1, false, 0),
                                        AXB(MemLoc(5), 0, 1, true, 1)
                                      })
   || interpreter[STEP, TERMINATE](5, {
                                        AXB(MemLoc(5), 0, 1, false, 0),
                                        AXB(MemLoc(6), 0, 1, true, 1)
                                      })
   || interpreter[STEP, TERMINATE](6, {
                                        AXB(MemLoc(6), 0, 1, false, 0)
                                      })
   end par
end par

end process

end module
